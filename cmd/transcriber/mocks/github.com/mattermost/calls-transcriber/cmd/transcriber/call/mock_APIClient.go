// Code generated by mockery v2.40.3. DO NOT EDIT.

package call

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockAPIClient is an autogenerated mock type for the APIClient type
type MockAPIClient struct {
	mock.Mock
}

type MockAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIClient) EXPECT() *MockAPIClient_Expecter {
	return &MockAPIClient_Expecter{mock: &_m.Mock}
}

// DoAPIRequest provides a mock function with given fields: ctx, method, url, data, etag
func (_m *MockAPIClient) DoAPIRequest(ctx context.Context, method string, url string, data string, etag string) (*http.Response, error) {
	ret := _m.Called(ctx, method, url, data, etag)

	if len(ret) == 0 {
		panic("no return value specified for DoAPIRequest")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (*http.Response, error)); ok {
		return rf(ctx, method, url, data, etag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *http.Response); ok {
		r0 = rf(ctx, method, url, data, etag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, method, url, data, etag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_DoAPIRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoAPIRequest'
type MockAPIClient_DoAPIRequest_Call struct {
	*mock.Call
}

// DoAPIRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - url string
//   - data string
//   - etag string
func (_e *MockAPIClient_Expecter) DoAPIRequest(ctx interface{}, method interface{}, url interface{}, data interface{}, etag interface{}) *MockAPIClient_DoAPIRequest_Call {
	return &MockAPIClient_DoAPIRequest_Call{Call: _e.mock.On("DoAPIRequest", ctx, method, url, data, etag)}
}

func (_c *MockAPIClient_DoAPIRequest_Call) Run(run func(ctx context.Context, method string, url string, data string, etag string)) *MockAPIClient_DoAPIRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockAPIClient_DoAPIRequest_Call) Return(_a0 *http.Response, _a1 error) *MockAPIClient_DoAPIRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_DoAPIRequest_Call) RunAndReturn(run func(context.Context, string, string, string, string) (*http.Response, error)) *MockAPIClient_DoAPIRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DoAPIRequestBytes provides a mock function with given fields: ctx, method, url, data, etag
func (_m *MockAPIClient) DoAPIRequestBytes(ctx context.Context, method string, url string, data []byte, etag string) (*http.Response, error) {
	ret := _m.Called(ctx, method, url, data, etag)

	if len(ret) == 0 {
		panic("no return value specified for DoAPIRequestBytes")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, string) (*http.Response, error)); ok {
		return rf(ctx, method, url, data, etag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, string) *http.Response); ok {
		r0 = rf(ctx, method, url, data, etag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, string) error); ok {
		r1 = rf(ctx, method, url, data, etag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_DoAPIRequestBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoAPIRequestBytes'
type MockAPIClient_DoAPIRequestBytes_Call struct {
	*mock.Call
}

// DoAPIRequestBytes is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - url string
//   - data []byte
//   - etag string
func (_e *MockAPIClient_Expecter) DoAPIRequestBytes(ctx interface{}, method interface{}, url interface{}, data interface{}, etag interface{}) *MockAPIClient_DoAPIRequestBytes_Call {
	return &MockAPIClient_DoAPIRequestBytes_Call{Call: _e.mock.On("DoAPIRequestBytes", ctx, method, url, data, etag)}
}

func (_c *MockAPIClient_DoAPIRequestBytes_Call) Run(run func(ctx context.Context, method string, url string, data []byte, etag string)) *MockAPIClient_DoAPIRequestBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte), args[4].(string))
	})
	return _c
}

func (_c *MockAPIClient_DoAPIRequestBytes_Call) Return(_a0 *http.Response, _a1 error) *MockAPIClient_DoAPIRequestBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_DoAPIRequestBytes_Call) RunAndReturn(run func(context.Context, string, string, []byte, string) (*http.Response, error)) *MockAPIClient_DoAPIRequestBytes_Call {
	_c.Call.Return(run)
	return _c
}

// DoAPIRequestReader provides a mock function with given fields: ctx, method, url, data, headers
func (_m *MockAPIClient) DoAPIRequestReader(ctx context.Context, method string, url string, data io.Reader, headers map[string]string) (*http.Response, error) {
	ret := _m.Called(ctx, method, url, data, headers)

	if len(ret) == 0 {
		panic("no return value specified for DoAPIRequestReader")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, map[string]string) (*http.Response, error)); ok {
		return rf(ctx, method, url, data, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, map[string]string) *http.Response); ok {
		r0 = rf(ctx, method, url, data, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, map[string]string) error); ok {
		r1 = rf(ctx, method, url, data, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_DoAPIRequestReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoAPIRequestReader'
type MockAPIClient_DoAPIRequestReader_Call struct {
	*mock.Call
}

// DoAPIRequestReader is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - url string
//   - data io.Reader
//   - headers map[string]string
func (_e *MockAPIClient_Expecter) DoAPIRequestReader(ctx interface{}, method interface{}, url interface{}, data interface{}, headers interface{}) *MockAPIClient_DoAPIRequestReader_Call {
	return &MockAPIClient_DoAPIRequestReader_Call{Call: _e.mock.On("DoAPIRequestReader", ctx, method, url, data, headers)}
}

func (_c *MockAPIClient_DoAPIRequestReader_Call) Run(run func(ctx context.Context, method string, url string, data io.Reader, headers map[string]string)) *MockAPIClient_DoAPIRequestReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(map[string]string))
	})
	return _c
}

func (_c *MockAPIClient_DoAPIRequestReader_Call) Return(_a0 *http.Response, _a1 error) *MockAPIClient_DoAPIRequestReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_DoAPIRequestReader_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, map[string]string) (*http.Response, error)) *MockAPIClient_DoAPIRequestReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPIClient creates a new instance of MockAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIClient {
	mock := &MockAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
